ExamCPP - Chapter 1 AssessmentTime left: 41:18

1. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <vector>
#include <iostream>

int main ()
{
        std::vector<int>        v1;                // LINE I
        v1.push_back(10);                        // LINE II
        std::cout<<v1.front()<<":"<<v1.back()<<std::endl;                // LINE III
        return 0;
}
 
Select correct answer (single choice)
 code compiles and executes successfully 
 compilation fails due to error in line 3 
 compilation fails due to error in line 1 
 program displays 0:10 
 compilation fails due to error in line 2 


2. Which statements are true about the code below? Choose all that apply.

#include <vector>
#include <iostream>
using namespace std;
int main ()
{
        vector<int>        v1(4, 3);
        v1.push_back(4);
        for(vector<int>::iterator i = v1.rbegin(); i != v1.rend(); ++i)
        {
                cout << *i << " ";
        }
        cout<< endl;
        return 0;
}
 

Select correct answer (single choice)
 program displays 3 3 3 3 4 
 program will not compile 
 program displays 4 4 4 4 
 v1.capacity() and v1.size() returns the same value; 
 program displays 4 3 3 3 3 


3. Which sentences are 100% true about the code below (multiple choice) when control reaches return:

#include <vector>
#include <iostream>

using namespace std;

int main ()
{
        vector<int>        v1(10, -1);
        vector<int> v2;
        v2.reserve(10);
        for(unsigned i=0; i < 10; i++)
        {
                v2.push_back(i);
        }
        return 0;
}
 

Select correct answers (multiple choice)
 value returned by size() is the same for vectors v1 and v2 
 code will not compile 
 both vectors v1 and v2 have the same capacity 
 size of vector v2 less than 20 


4. Which sentences are 100% true about the code below (multiple choice) when control reaches return:

#include <vector>
#include <iostream>
#include <stdexcept>

using namespace std;

int main ()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<int> v1(tab, tab+10);
        vector<int> v2(v1.size(), 0);
        try
        {
                for(unsigned i=0; i<=v1.size(); ++i)
                {
                        int tmp = v1[i];                                // LINE I
                        v1[i] = v1.at(v1.size()-i);                // LINE        II
                        v1.at(i) = tmp;                                        // LINE III
                        cout<<v1[i] << " ";
                }
        }
        catch(...)
        {
                cout<<"Exception!"<<endl;
        }

        return 0;
}
 

Select correct answer (single choice)
 this program will not compile, 
 program will run and print output: 10 9 8 7 6 5 4 3 2 1 Exception! 
 program will run and print output: Exception! 
 the exception will be thrown at line LINE I 
 the exception will be thrown at line LINE III 


5. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <deque>
#include <iostream>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        deque<int> d1(tab, tab+10);
        deque<int> d2;
        deque<int>::iterator it;
        for(it = d1.begin(); it != d1.end(); ++it)
        {
                d2.push_back(d1[d1.end()-it-1]);        //LINE I
        }
        print(d2.rbegin(), d2.rend()) << endl;        //LINE II
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 the result of program execution is unpredictable or there might be run time exception 
 code will not compile due to error in line LINE II 
 code will not compile due to error in line LINE I 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 


6. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <deque>
#include <iostream>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        deque<int> d1(tab, tab+10);
        
        deque<int>::const_iterator it = d1.begin()+3;
        d1.erase(it, it + 1);
        print(d1.begin(), d1.end());
        d1.clear();
        cout<<d1.size()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 1 2 3 6 7 8 9 10 8 
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 9 
 code will not compile 
 program will run successfuly and display: 1 2 3 6 7 8 9 10 0 
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 0 


7. Which methods from std::deque class can be used to check if there are elements in the container. Choose all that apply:
Select correct answers (multiple choice)
 there is no such method 
 is_empty() 
 clear() 
 size() 
 empty() 


8. What will happen when you attempt to compile and run the following code?

#include <deque>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        deque<int> d1(tab, tab+10);
        deque<int> d2;

        while(!d1.empty())
        {
                d2.push_front(d1.back());                //        LINE I
                d1.pop_front();                                        //        LINE II
        }
        print(d2.begin(), d2.end())<<": "<<d2.size()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 code will not compile due to error in line marked LINE II 
 program will run successfuly and display: 10 10 10 10 10 10 10 10 10 10 : 10 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 : 10 
 program will run successfuly and display: 1 1 1 1 1 1 1 1 1 1 : 10 
 code will not compile due to error in line marked LINE I 


9. What will happen when you attempt to compile and run the following code?

#include <list>
#include <deque>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
        A(const A & a) {}
};

ostream & operator<<(ostream & c, const A & o)
{
        c<<o.a;
        return c;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<A> l1(tab, tab+10);
        deque<A> d1;
        list<A>::iterator it;
        for(it = l1.begin(); it != l1.end(); ++it)
        {
                d1.insert(d1.begin(), it[0]);
        }
        print(d1.begin(), d1.end())<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly but displayed result is unpredictable 
 code will not compile 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 


10. What will happen when you attempt to compile and run the following code?

#include <list>
#include <deque>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
        A(const A & a) {}
};

ostream & operator<<(ostream & c, const A & o)
{
        c<<o.a;
        return c;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<A> l1(tab, tab+10);
        deque<A> d1;
        list<A>::iterator it;

        for(it = l1.begin(); it != l1.end(); ++it)
        {
                d1.insert(d1.begin(), it[0]);
        }
        print(d1.begin(), d1.end())<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 
 program will run successfuly but displayed result is unpredictable 
 code will not compile 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 


11. What will happen when you attempt to compile and run the following code?

#include <list>
#include <iostream>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<int> l1(tab, tab+10);
        list<int> l2;
        list<int>::iterator it;
        for(it = l1.begin(); it != l1.end(); ++it)
        {
                l2.push_back(l1[l1.end()-it-1]);        //LINE I
        }
        print(l2.begin(), l2.end()) << endl;        //LINE II
        return 0;
}
 

Select correct answer (single choice)
 code will not compile due to error in line LINE II 
 code will not compile due to error in line LINE I 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 the result of program execution is unpredictable or there might be run time exception 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 


12. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <list>
#include <iostream>
#include <functional>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<int> l1(tab, tab+10);
        
        list<int>::const_iterator it = l1.begin()+3;        //LINE I
        l1.erase(it, advance(it,1));                                        //LINE II
        print(l1.begin(), l1.end());
        l1.clear();                                                                                //LINE III
        cout<<l1.size()<<endl;
        return 0;
}
 

Select correct answers (multiple choice)
 code will not compile due to error in line LINE III 
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 9 
 code will not compile due to error in line LINE I 
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 0 
 code will not compile due to error in line LINE II 


13. Which method or methods from std::list class can delete all the elements from the collection in one call:
Select correct answers (multiple choice)
 there is no such method 
 delete() 
 erase() 
 empty() 
 clear() 


14. What will happen when you attempt to compile and run the following code?

#include <list>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<int> l1(tab, tab+10);
        list<int> l2;
        l2.resize(10);

        while(!l1.empty())
        {
                
                l2.insert(l2.end(), l1.front());
                l1.pop_front();
        }
        print(l2.begin(), l2.end())<<": "<<l2.size()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 : 10 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 : 20 
 none of these 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 : 10 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 : 20 
 code will not compile 


15. What will happen when you attempt to compile and run the following code?

#include <list>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
};

ostream & operator<<(ostream & c, const A & o)
{
        c<<o.a;
        return c;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        list<A> l1(tab, tab+10);
        list<A> l2;
        list<A>::iterator it;
        for(it = l1.begin(); it != l1.end(); ++it)
        {
                l2.push_front(it);
        }
        print(l2.begin(), l2.end())<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 program will run successfuly but displayed result is unpredictable 
 code will not compile 


16. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <list>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
};

void fill (const int table[], unsigned size, vector<A*> & v)
{
        for(unsigned i = 0; i < size; ++i)
        {
                v.push_back(new A(table[i]));                        //LINE I
        }
}

ostream & operator<<(ostream & c, const A & o)
{
        c<<o.a;
        return c;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<A*> v1;
        fill(tab, 10, v1);
        
        vector<A*>::iterator it;
        list<A> l1;
        for(it = v1.begin(); it != v1.end(); ++it)
        {
                l1.push_front(**it);
        }
        print(l1.begin(), l1.end())<<endl;
        return 0;                //LINE I
}
 

Select correct answers (multiple choice)
 when program reaches LINE I there will be 20 objects of type A 
 when program reaches LINE I there will be 10 objects of type A 
 code will not compile 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 
 program will run successfuly but displayed result is unpredictable 


17. Which container class can be used as underlaying container for priority_queue:
Select correct answers (multiple choice)
 set 
 list 
 vector 
 map 
 deque 



18. Which of the following examples shows the proper way to create a new priority_queue container assuming all necessary declarations has been performed. Choose all that apply:
Select correct answers (multiple choice)
 deque<int> d; priority_queue<int> q(d.begin(), d.end()); 
 deque<int> d; priority_queue<int> q(d); 
 queue<int> q; 
 vector<int> v; priority_queue<int> q(v); 
 list<int> l; priority_queue<int> q(l); 


19. What will happen when you attempt to compile and run the following code?

#include <vector>
#include <queue>
#include <iostream>

using namespace std;

int main()
{
        int t[] = {3, 5, 1, 4, 2};
        vector<int>        v(t, t+5);
        priority_queue<int> q(v.begin(), v.end());
        cout<<q.top()<<" ";
        q.push(0);
        cout<<q.top()<<endl;
        return 0;
}
 

Select correct answers (multiple choice)
 program will display: 2 0 
 program will display: 5 5 
 program will display: 3 0 
 program will display: 3 3 
 program will display: 1 1 


20. Which container class can be used as underlaying container for queue:
Select correct answers (multiple choice)
 deque 
 map 
 vector 
 set 
 list 


21. Which of the following examples shows the proper way to create a new queue container assuming all necessary declarations has been performed. Choose all that apply:
Select correct answers (multiple choice)
 queue<int> q; 
 deque<int> d; queue<int> q(d.begin(), d.end()); 
 list<int> l; queue<int> q(l); 
 vector<int> v; queue<int> q(v); 
 deque<int> d; queue<int> q(d); 


22. What will happen when you attempt to compile and run the following code?

#include <queue>
#include <deque>
#include <iostream>

using namespace std;

int main()
{
        int t[] = {1, 5, 3, 4, 2};
        deque<int>        d(t, t+5);
        queue<int> q(d);
        cout<<q.front()<<" "<<q.back()<<" ";
        q.pop();
        cout<<q.front()<<" "<<q.back()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will display: 1 2 5 2 
 program will display: 2 1 4 1 
 program will display: 1 2 5 4 
 program will display: 1 5 2 5 
 program will display: 5 1 4 1 


23. Which container class can be used as underlaying container for stack. Choose all that apply:
Select correct answers (multiple choice)
 map 
 vector 
 list 
 deque 
 set 


24. Which of the following examples shows the proper way to create a new stack container assuming all necessary declarations has been performed. Choose all that apply:
Select correct answers (multiple choice)
 deque<int> d; stack<int> s(d.begin(), d.end()); 
 vector<int> v; stack<int> s(v); 
 deque<int> d; stack<int> s(d); 
 list<int> l; stack<int> s(l); 
 stack<int> s; 


25. What will happen when you attempt to compile and run the following code?

#include <stack>
#include <deque>
#include <iostream>

using namespace std;

int main()
{
        int t[] = {1, 5, 3, 4, 2};
        deque<int>        d(t, t+5);
        stack<int> s(d);
        cout<<s.top()<<" ";
        d.push_front(6);
        cout<<s.top()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will display: 1 1 
 program will display: 1 6 
 program will cause runtime exception 
 program will display: 2 6 
 program will display: 2 2 


26. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <vector>
#include <iostream>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<int> v1(tab, tab+10);
        vector<int> v2;
        vector<int>::iterator it;
        for(it = v1.begin(); it != v1.end(); ++it)
        {
                v2.push_back(v1[v1.end()-it-1]);        //LINE I
        }
        print(v2.rbegin(), v2.rend()) << endl;        //LINE II
        return 0;
}
 

Select correct answer (single choice)
 the result of program execution is unpredictable or there might be run time exception 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 
 code will not compile due to error in line LINE I 
 code will not compile due to error in line LINE II 


27. What will happen when you attempt to compile and run the following code? Choose all that apply:

#include <vector>
#include <iostream>

using namespace std;

template<typename T> ostream & print(T & start, T & end)
{
        for(; start != end; ++start)
        {
                cout<< *start<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<int> v1(tab, tab+10);
        
        vector<int>::const_iterator it = v1.begin()+3;
        v1.erase(it, it + 1);
        print(v1.begin(), v1.end());
        v1.empty();
        cout<<v1.size()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 9 
 code will not compile 
 program will run successfuly and display: 1 2 3 6 7 8 9 10 8 
 program will run successfuly and display: 1 2 3 5 6 7 8 9 10 0 
 program will run successfuly and display: 1 2 3 6 7 8 9 10 0 


28. Which method from std::vector class can delete element of the vector using only its position within the vector (not iterator) as parameter:
Select correct answer (single choice)
 remove() 
 clear() 
 erase() 
 there is no such method 
 delete() 


29. What will happen when you attempt to compile and run the following code?

#include <vector>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<int> v1(tab, tab+10);
        vector<int> v2;
        v2.reserve(10);

        while(!v1.empty())
        {
                v2.insert(v2.begin(), v1.pop_back());
        }
        print(v2.rbegin(), v2.rend())<<": "<<v2.size()<<endl;
        return 0;
}
 

Select correct answer (single choice)
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 : 20 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 : 10 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 : 10 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 : 20 
 code will not compile 


30. What will happen when you attempt to compile and run the following code?

#include <vector>
#include <iostream>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";                        //LINE II
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
};

ostream & operator<<(const A & o, ostream & c)
{
        c<<o.a;
        return c;
}

int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<A> v1(tab, tab+10);                //LINE I
        v1.insert(v1.end(), A(0));
        print(v1.begin(), v1.end())<<endl;
        return 0;
}
 

Select correct answer (single choice)
 code will not compile due to error in line marked LINE II 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 0 
 code will not compile due to error in line marked LINE I 
 program will run successfuly and display: 0 1 2 3 4 5 6 7 8 9 10 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 


31. What will happen when you attempt to compile and run the following code?

#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

template<typename T> ostream & print(const T & start, const T & end)
{
        T tmp = start;
        for(; tmp != end; ++tmp)
        {
                cout<< *tmp<< " ";
        }
        return cout;
}
class A
{
public:
        int a;
public:
        A(int a):a(a) {}
};

ostream & operator<<(ostream & c, const A & o)
{
        c<<o.a;
        return c;
}

void fill (const int table[], unsigned size, vector<A*> & v)
{
        for(unsigned i = 0; i < size; ++i)
        {
                v.push_back(new A(table[i]));                        //LINE I
        }
}

void del(A * p)
{
        delete p;
}
int main()
{
        int tab[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        vector<A*> v1;
        fill(tab, 10, v1);

        print(v1.rbegin(), v1.rend())<<endl;                //LINE II
        for_each(v1.begin(), v1.end(), del);
        return 0;
}
 

Select correct answer (single choice)
 code will not compile due to error in line marked LINE I 
 program will run successfuly and display: 10 9 8 7 6 5 4 3 2 1 
 none of these 
 program will run successfuly and display: 1 2 3 4 5 6 7 8 9 10 
 code will not compile due to error in line marked LINE II 

          
Answer:
1. A
2. E
3. BD
4. C
5. E
6. C
7. DE
8. B
9. C
10. 